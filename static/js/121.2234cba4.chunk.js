(self.webpackChunkcropui=self.webpackChunkcropui||[]).push([[121],{7020:(i,n,t)=>{"use strict";t.d(n,{OpenloginAdapter:()=>g,getOpenloginDefaultOptions:()=>h});var e=t(70673),o=t(7585),s=t(64467),r=t(60434),a=t(5544),c=t.n(a);const h=(i,n)=>({adapterSettings:{network:e.lX.MAINNET,clientId:"",uxMode:e.sE.POPUP},chainConfig:i?(0,o.aD)(i,n):null,loginSettings:{}});function l(i,n){var t=Object.keys(i);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(i);n&&(e=e.filter((function(n){return Object.getOwnPropertyDescriptor(i,n).enumerable}))),t.push.apply(t,e)}return t}function p(i){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){(0,s.A)(i,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(i,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(i,n,Object.getOwnPropertyDescriptor(t,n))}))}return i}class g extends o.Dy{constructor(i){var n,t,r;super(),(0,s.A)(this,"name",o.Db.OPENLOGIN),(0,s.A)(this,"adapterNamespace",o.Zc.MULTICHAIN),(0,s.A)(this,"type",o.NG.IN_APP),(0,s.A)(this,"openloginInstance",null),(0,s.A)(this,"status",o.bK.NOT_READY),(0,s.A)(this,"currentChainNamespace",o.lJ.EIP155),(0,s.A)(this,"openloginOptions",void 0),(0,s.A)(this,"loginSettings",{}),(0,s.A)(this,"privKeyProvider",null),o.Rm.debug("const openlogin adapter",i);const a=h(null===(n=i.chainConfig)||void 0===n?void 0:n.chainNamespace,null===(t=i.chainConfig)||void 0===t?void 0:t.chainId);if(this.openloginOptions=p(p({clientId:"",network:e.lX.MAINNET},a.adapterSettings),i.adapterSettings||{}),this.loginSettings=p(p({},a.loginSettings),i.loginSettings),this.sessionTime=this.loginSettings.sessionTime||86400,null!==(r=i.chainConfig)&&void 0!==r&&r.chainNamespace){var c;this.currentChainNamespace=null===(c=i.chainConfig)||void 0===c?void 0:c.chainNamespace;const n=a.chainConfig?a.chainConfig:{};if(this.chainConfig=p(p({},n),null===i||void 0===i?void 0:i.chainConfig),o.Rm.debug("const openlogin chainConfig",this.chainConfig),!this.chainConfig.rpcTarget&&i.chainConfig.chainNamespace!==o.lJ.OTHER)throw o.il.invalidParams("rpcTarget is required in chainConfig")}}get chainConfigProxy(){return this.chainConfig?p({},this.chainConfig):null}get provider(){var i;return(null===(i=this.privKeyProvider)||void 0===i?void 0:i.provider)||null}set provider(i){throw new Error("Not implemented")}async init(i){var n;if(super.checkInitializationRequirements(),null===(n=this.openloginOptions)||void 0===n||!n.clientId)throw o.il.invalidParams("clientId is required before openlogin's initialization");if(!this.chainConfig)throw o.il.invalidParams("chainConfig is required before initialization");let t=!1;if(this.openloginOptions.uxMode===e.sE.REDIRECT){const i=(0,e.bG)();Object.keys(i).length>0&&i._pid&&(t=!0)}this.openloginOptions=p(p({},this.openloginOptions),{},{replaceUrlOnRedirect:t}),this.openloginInstance=new e.Ay(this.openloginOptions),o.Rm.debug("initializing openlogin adapter init"),await this.openloginInstance.init(),this.status=o.bK.READY,this.emit(o.k9.READY,o.Db.OPENLOGIN);try{o.Rm.debug("initializing openlogin adapter"),this.openloginInstance.privKey&&(i.autoConnect||t)&&await this.connect()}catch(s){o.Rm.error("Failed to connect with cached openlogin provider",s),this.emit("ERRORED",s)}}async connect(i){super.checkConnectionRequirements(),this.status=o.bK.CONNECTING,this.emit(o.k9.CONNECTING,p(p({},i),{},{adapter:o.Db.OPENLOGIN}));try{return await this.connectWithProvider(i),this.provider}catch(n){if(o.Rm.error("Failed to connect with openlogin provider",n),this.status=o.bK.READY,this.emit(o.k9.ERRORED,n),null!==n&&void 0!==n&&n.message.includes("user closed popup"))throw o.T7.popupClosed();throw o.T7.connectionError("Failed to login with openlogin")}}async disconnect(){let i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};if(this.status!==o.bK.CONNECTED)throw o.T7.notConnectedError("Not connected with wallet");if(!this.openloginInstance)throw o.il.notReady("openloginInstance is not ready");await this.openloginInstance.logout(),i.cleanup?(this.status=o.bK.NOT_READY,this.openloginInstance=null,this.privKeyProvider=null):this.status=o.bK.READY,this.emit(o.k9.DISCONNECTED)}async authenticateUser(){if(this.status!==o.bK.CONNECTED)throw o.T7.notConnectedError("Not connected with wallet, Please login/connect first");return{idToken:(await this.getUserInfo()).idToken}}async getUserInfo(){if(this.status!==o.bK.CONNECTED)throw o.T7.notConnectedError("Not connected with wallet");if(!this.openloginInstance)throw o.il.notReady("openloginInstance is not ready");return await this.openloginInstance.getUserInfo()}setAdapterSettings(i){if(this.status===o.bK.READY)return;const n=h();this.openloginOptions=p(p(p({},n.adapterSettings),this.openloginOptions||{}),i),i.sessionTime&&(this.loginSettings=p(p({},this.loginSettings),{},{sessionTime:i.sessionTime}))}setChainConfig(i){super.setChainConfig(i),this.currentChainNamespace=i.chainNamespace}async connectWithProvider(i){if(!this.chainConfig)throw o.il.invalidParams("chainConfig is required before initialization");if(!this.openloginInstance)throw o.il.notReady("openloginInstance is not ready");if(this.currentChainNamespace===o.lJ.SOLANA){const{SolanaPrivateKeyProvider:i}=await Promise.all([t.e(489),t.e(952),t.e(709)]).then(t.bind(t,11952));this.privKeyProvider=new i({config:{chainConfig:this.chainConfig}})}else if(this.currentChainNamespace===o.lJ.EIP155){const{EthereumPrivateKeyProvider:i}=await Promise.all([t.e(70),t.e(390)]).then(t.bind(t,17070));this.privKeyProvider=new i({config:{chainConfig:this.chainConfig}})}else{if(this.currentChainNamespace!==o.lJ.OTHER)throw new Error("Invalid chainNamespace: ".concat(this.currentChainNamespace," found while connecting to wallet"));this.privKeyProvider=new r.lL}var n;!this.openloginInstance.privKey&&i&&(this.loginSettings.curve||(this.loginSettings.curve=this.currentChainNamespace===o.lJ.SOLANA?e.el.ED25519:e.el.SECP256K1),await this.openloginInstance.login(c()(this.loginSettings,{loginProvider:i.loginProvider},{extraLoginOptions:p(p({},i.extraLoginOptions||{}),{},{login_hint:i.login_hint||(null===(n=i.extraLoginOptions)||void 0===n?void 0:n.login_hint)})})));let s=this.openloginInstance.privKey;if(s){if(this.currentChainNamespace===o.lJ.SOLANA){const{getED25519Key:i}=await Promise.all([t.e(489),t.e(626)]).then(t.bind(t,37618));s=i(s).sk.toString("hex")}await this.privKeyProvider.setupProvider(s),this.status=o.bK.CONNECTED,this.emit(o.k9.CONNECTED,{adapter:o.Db.OPENLOGIN,reconnected:!i})}}}},42634:()=>{}}]);